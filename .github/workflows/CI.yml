name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
        python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: Jimver/cuda-toolkit@v0.2.19
        id: cuda-toolkit
        with:
          cuda: '12.4.1'
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'
          non-cuda-sub-packages: '["libcublas","libcublas-dev","libcufft"]'  
      - name: Install things
        run: sudo apt update && sudo apt -y install cmake gcc-12 g++-12 libnvidia-compute-565-server curl libcurl4-gnutls-dev
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: CMAKE_CUDA_ARCHITECTURES=75 CUDA_ARCHITECTURES=75 CUDACXX=/usr/local/cuda/bin/nvcc cargo build --release --all-features
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i python${{ matrix.python-version }} --manifest-path bihyung/Cargo.toml
          sccache: 'true'
          manylinux: auto
          docker-options: |
            -v /usr/local/cuda:/usr/local/cuda -e CMAKE_CUDA_ARCHITECTURES=75 -e CUDA_ARCHITECTURES=75 -e CUDACXX=/usr/local/cuda/bin/nvcc
          before-script-linux: |
            git config --global --add safe.directory /home/runner/work/llm-daemon/llm-daemon/llama-cpp-low/llama.cpp
            yum -y install curl libcurl-devel
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}-py${{ matrix.python-version }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-14
            target: aarch64
        python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: cargo build --release
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: -i python${{ matrix.python-version }} --release --out dist --manifest-path bihyung/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}-py${{ matrix.python-version }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, macos]
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Clean everything before publish
        uses: actions-rs/cargo@v1
        with:
          command: clean
      - name: Publish llama-cpp-low to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: -p llama_cpp_low --allow-dirty --no-verify --token ${{ secrets.CRATES_API_TOKEN }}
      - name: Publish llm-daemon to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: -p llm-daemon --allow-dirty --no-verify --all-features --token ${{ secrets.CRATES_API_TOKEN }}
